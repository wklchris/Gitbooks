{"./":{"url":"./","title":"《reStructuredText 笔记》前言","keywords":"","body":"《reStructuredText 笔记》前言 在线阅读：前往 Github.io 本笔记是我在学习使用 Sphinx 进行文档撰写时的副产物——它使用 reStructuredText（reST）标记语言作为默认的文档记录语言． 要阅读此文，建议（但非必须）具备以下知识： 了解 Markdown 基础语法，或任一种标记语言 主要参考页面： Sphinx 官方：rST Primer © wklchris all right reserved，powered by Gitbook最后修改于： 2018-10-14 "},"Ch-01.html":{"url":"Ch-01.html","title":"与 Markdown 的比较","keywords":"","body":"与 Markdown 的比较 作为一个标记语言，Markdown 应该是站在了轻量、易读、易写三者结合的巅峰了．那么，撰写在线文档时，为什么还要考虑 Sphinx + reST 这样的组合呢？ 因为 Markdown 有个最大的弊病：不统一． 这个不统一体现在多个方面；既包括风格的不统一（这里最通用的可能是 Github Flavor，但是仍不能说所有平台都统一了），也包括渲染效果的不统一． 风格的不统一带来了很严重的问题，最主要体现在扩展功能的实现．举例来说，Github 风格的 Markdown 支持勾选框（checkbox），但是这一功能并不是“原生”Markdown 的特性．这导致在其他的在线 Markdown 预览服务商，带有勾选框功能的文本不能正常显示． 渲染效果的不统一主要是体现在代码块上．虽然这一点往往能够通过插件解决，但是 Markdown 也为没能提出简洁的解决方案而受到弊病．比如有的网站可以识别形如 ```java 的代码块起始，并用 Java 语法进行高亮；而有的却不行． Markdown 在严谨和易用中取了平衡，就注定了其偏向日常的定位，且需要更多的其他社区努力来完善一整套解决方案．相比之下，reST 无疑是牺牲了易读和易写性的；但是作为补充，它提供了更多灵活的定制功能．在一份需要严格排版、保证效果唯一稳定的文档中，这些特性都较为可贵． © wklchris all right reserved，powered by Gitbook最后修改于： 2018-10-14 "},"Ch-02.html":{"url":"Ch-02.html","title":"正文","keywords":"","body":"正文 简要介绍 reST 的语法． 段落 空行即定义了段落的分离．值得注意的是，行首的空格不能随意使用（就像 Python 语法一样）；正常段落需要顶格书写． 行内标记 被行内标记的文本前后不允许空白，比如 * text * 是不允许的． 强调：单星号 *text*，表现为加斜 重点强调：双星号 **text**，表现为加粗 代码：重音号，`text` ，表现为等宽字体 标题 reST 的标题可以使用多种语法，主体要求是将符号作为“上下划线”写在标题上下两侧（或仅下侧），其长度需大于标题文字长、且上下等长．这里介绍 Python 风格文档的推荐： ####### Part ####### ********* Chapter ********* Section ========= Subsection ------------- Subsubsection ^^^^^^^^^^^^^^^^^ Paragraph \"\"\"\"\"\"\"\"\"\"\"\"\"\"\" 列表 非编号列表使用 *．嵌套的列表前后需要额外的空行． * 1st * 2nd * nested list * 3rd 编号列表中，可以使用 # 来自动编号： 1. One 2. Two #. Three 定义列表用来罗列定义和它们的解释，其中解释文本需要缩进： 术语1 术语的解释必须缩进书写， 可以分多段． 术语2 解释 字段列表是一种记录字段“键值对”的块，键用一对冒号 : 包裹（这也是 Python 编程时函数文档的常用格式）．例子取自这里： :Date: 2001-08-16 :Version: 1 :Authors: - Me - Myself - I :Indentation: Since the field marker may be quite long, the second and subsequent lines of the field body do not have to line up with the first line, but they must be indented relative to the field name marker, and they must line up with each other. 选项列表是一种介绍命令选项的列表，就像 CMD 命令行的帮助一样．例子取自这里： -a Output all. -b Output both (this description is quite long). -c arg Output just arg. --long Output all day long. -p This option has two paragraphs in the description. This is the first. This is the second. Blank lines may be omitted between options (as above) or left in (as here and below). --very-long-option A VMS-style option. Note the adjustment for the required two spaces. 块 引用块只需要比附近的段落额外缩进即可． 代码块首段用双冒号 :: 结尾，块中需要缩进． This is a code block:: a = 3 b = 4 c = sqrt(a^2 + b^2) Return to normal paragraph. 更优美的代码高亮，请参考“指令”一节的内容． 文字引用块是一种引用对话的块，首段用双冒号 :: 结尾，后面每行可用 > 开头．例子取自这里： John Doe wrote:: >> Great idea! > > Why didn't I think of that? You just did! ;-) 分行块是一种提供断行方式的块： | This is a | sentence which is | split into multilines. 文档测试块是一种显示交互式 Python 运行结果的块．块后需要额外空行． >>> 1 + 2 3 链接 首先是网页外链，形如：`text ` ，尖括号内的网址会被识别． 为了下面的内容，我们来介绍链接目标的概念．链接可以被定义为一个目标，便于多次使用．要引用链接目标时，在链接名（如果含空格，则用重音号包起）后加下划线 _；要定义链接目标，用双点号起行，并用下划线加链接名的方式指定链接目标，再后加冒号 : 加以定义： Welcome to `my website`_．You can Emailme_ if you like. .. _my website: http://example.org/ .. _Emailme: jerry@example.org 其次是交叉引用链接，用于文档内跳转；引用链接需要以下划线 _ 开头.如果你在某标题的上方（紧挨着）定义了引用链接，那么可以用 :ref:labelname 进行访问： .. _new-section ## Here is a new section Click to visit :ref:`new-section`. 如果链接目标并不定义在上述的位置，你需要在引用时给出一个显示文字．例如：:ref: A section ． 角色 reST 的角色使用格式是：:rolename:`content` ，常用的有： emphasis, strong, literal：即 *content*, **content** 与 `content` ． subscript, superscript：下标与上标． math：行内数学模式．行间数学模式请使用下一节介绍的 .. math:: 指令． ref：上一节提到的交叉引用链接． 指令 reST 的指令格式：.. directivename::，常用的有： 图像：.. image:: ex.png 脚注：.. rubic:: Footnotes，可以在文中使用自动编号的标签 [#]_．例子取自这里： Footnote 1 [#f1]_ and footnote 2 [#f2]_ .. rubic:: Footnotes .. [#f1] First. .. [#f2] Second. 注记：注记可以从所有文件中引用． Citation [Ref] is gloabl accessible [Cit]. .. [Ref] First. .. [Cit] Second. 注释：单行 .. This is a comment.，多行： .. Indented contents after double dots are comments. Mutli-paragraph comments. 代码：以高亮 python 为例，常使用 code-block 指令，还可以配合其他角色： .. code-block:: python :caption: Caption before this block :name: A name can be refered using \":ref:\" :linenos: :emphasis-lines: 1, 4 import numpy as np a = 3 b = 4 c = a + b 另一个选择是 literalinclude，可以直接调用文件（并可指定输出哪些行），甚至用 :diff: 与另一个文件进行 diff： .. literalinclude:: example.py :lines: 1, 3-12, 23- :linenos: 数学：行间数学公式．行内亦可使用该指令．用空行表示换行．角色 :label: 可以给公式自动编号． .. math:: :label: a^2 + b^2 = c^2 y = x^2 + \\sqrt{x} 如果想实现 LaTeX 中 align 环境的效果，使用 & 与 \\\\ 即可： .. math:: y &= (ax + b)^2 \\\\ &= a^2 x^2 + 2abx + b^2 要去除所有隐含的数学环境（比如上例中的 \\begin{align}），使用 :nowrap: 角色． 术语：如同 Gitbook 的术语表． .. glossary:: term1 Def term2 term3 Share this def 表格 reST 主要支持两种表格．第一种是网格表，表头与表体用 = 分割，交点使用 +．例子取自这里： +------------------------+------------+----------+----------+ | Header row, column 1 | Header 2 | Header 3 | Header 4 | | (header rows optional) | | | | +========================+============+==========+==========+ | body row 1, column 1 | column 2 | column 3 | column 4 | +------------------------+------------+----------+----------+ | body row 2 | ... | ... | | +------------------------+------------+----------+----------+ 第二种是简表，或三线表，只有 = 是必须的．例子取自这里： ===== ===== ====== Inputs Output ------------ ------ A B A or B ===== ===== ====== False False False True False True False True True True True True ===== ===== ====== 还有两种不常用的，分别是CSV表与罗列表．在此只给出两个例子（均来自这里）： .. csv-table:: Frozen Delights! :header: \"Treat\", \"Quantity\", \"Description\" :widths: 15, 10, 30 \"Albatross\", 2.99, \"On a stick!\" \"Crunchy Frog\", 1.49, \"If we took the bones out, it wouldn't be crunchy, now would it?\" \"Gannet Ripple\", 1.99, \"On a stick!\" .. list-table:: Frozen Delights! :widths: 15 10 30 :header-rows: 1 * - Treat - Quantity - Description * - Albatross - 2.99 - On a stick! * - Crunchy Frog - 1.49 - If we took the bones out, it wouldn't be crunchy, now would it? * - Gannet Ripple - 1.99 - On a stick! © wklchris all right reserved，powered by Gitbook最后修改于： 2018-10-15 "},"Afterword.html":{"url":"Afterword.html","title":"后记","keywords":"","body":"后记 reStructuredText 学习成本比 Markdown 高了不少，但是尚在可以接受的范围内．毕竟相比 LaTeX，这些标记语言都算是简单易学了；但在网页端却能给出赏心悦目的排版效果． 祝 reST 使用愉快． 全文完． © wklchris all right reserved，powered by Gitbook最后修改于： 2018-10-15 "}}