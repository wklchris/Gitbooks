{"./":{"url":"./","title":"《Gitbook 学习笔记》前言","keywords":"","body":"《Gitbook 学习笔记》前言 在线阅读地址：前往 Github.io 本书是我使用 Gitbook 撰写的第一份书稿，希望对想学习 Gitbook 使用的人有所帮助．本手册针对 Windows 用户． 在阅读该手册之前，读者需要掌握的知识（如果你只需要在线撰写，可以忽略前两条）： 拥有一个用于发布 Gitbook 的 Github 仓库； 了解如何使用基本的 git 命令行； 了解如何使用 Markdown 语法进行书写． 如果你是一位多年的 Github 用户，相信以上都不会有任何问题． Gitbook 支持的特性： 目录分级与链接． 多语言文档支持． 术语自动索引． 对 LaTeX 数学公式（比如 eπi+1=0 e^{\\pi i} + 1 = 0 e​πi​​+1=0）的支持． 网页端强大的自定义样式． 多种成书格式选择． 祝阅读愉快． 本书于 2018 年 10 月开始撰写，当时 Gitbook 的版本是 3.2.3. © wklchris all right reserved，powered by Gitbook最后修改于： 2018-10-13 "},"Ch-01.html":{"url":"Ch-01.html","title":"简介与安装","keywords":"","body":"简介与安装 Gitbook 是怎样的东西，读者通过游玩本手册页面即可了解． 安装 通常的安装方式，是先在设备上安装 Node.js，再利用命令行安装 Gitbook． 在 Node.js 安装完毕后，打开命令行，输入： $ npm install gitbook-cli -g 然后，前往你的 Gitbook 文件夹，在该文件夹处打开 Git 命令行： $ gitbook init 安装完成，可以输入 -V 命令查看 Gitbook 版本号，以确定成功安装： $ gitbook -V CLI version: 2.3.2 GitBook version: 3.2.3 简例：Hello World 初始化你的 Gitbook 文件夹： $ gitbook init 对于一个常规的 Gitbook，它通常包含以下文件： _book 文件夹：无需同步，可用 gitignore 忽略 node_modules 文件夹：无需同步，可用 gitignore 忽略 book.json：书籍信息 xxx.md：书籍各章节，独立成 Markdown 文件 README.md：一般是书籍的前言或简介．如果你需要 Github 仓库显示项目介绍，那么可以指定书籍简介为另外的文件． SUMMARY.md：书籍的目录结构，只有此处列出的 Markdown 文件才会编入书中． GLOSSORY.md：术语列表，让 Gitbook 在文中遇到此列表中的术语时，自动对其进行索引和高亮． 在编写完成各章节的内容后，使用以下命令生成书籍1、并在本地端口预览： $ gitbook serve 或者直接构建静态网页内容： $ gitbook build 注意：如果使用 Github Pages 进行发布，构建时有一些细节需要注意，请参考利用 Github Pages 项目网页部分的内容． 书籍信息：book.json 本书的 book.json 文件 可以作为例子．主要的字段有： title：书籍名称 author：作者 description：书籍描述． language：当前书籍语言． gitbook：欲调用的 gitbook 版本号． styles：页面 CSS 样式． structure：关键文件位置． plugins：插件加载． pluginsConfig：插件参数． 关于插件的具体用法，我们在下一章讨论． 本章附注 1. 该命令长久以来被发现不稳定，时常产生 ENOENT 错误．解决办法是，前往 /lib/output/website 文件夹，将 copyPluginAssets.js 文件最后一个 fs.copyDir 中的 confirm 项的值由 true 改为 false．在 Windows 上，该文件的路径通常形如：C:\\Users\\[你的用户名]\\.gitbook\\versions\\[你的 Gitbook 版本号]\\lib\\output\\website． ↩ © wklchris all right reserved，powered by Gitbook最后修改于： 2018-10-13 "},"Ch-02.html":{"url":"Ch-02.html","title":"插件","keywords":"","body":"插件 部分工作借助插件可以很好地完成，就不需要再手动去修改默认的 CSS 等文件了． 插件安装与加载 在 book.json 文件中的 plugins 项，可以进行插件加载的管理．在每次运行预览命令（gitbook serve）或构建命令（gitbook build）前，如果新增了加载的插件，则需要插入新的一句命令： $ gitbook install ./ 该命令的作用是安装对应的插件．之后再预览或构建，插件就能正常加载了． 默认插件 Gitbook 默认自带了 5 个插件： fontsettings：字体插件． highlight：代码高亮插件，一般使用 prism 代替． search 与 lunr：搜索插件．由于不能搜索中文，建议用 search-pro 替换． sharing：分享插件．对本土化的支持有限，可改用 sharing-plus． 如果想要禁用默认插件，在 plugins 指明并前缀符号 - 即可，例如： { \"plugins\": [ \"-sharing\", \"-highlight\", \"prism\" ] } 上例中，第一行表示禁用 sharing 插件，第二行表示禁用 highlight 插件并启用 prism 插件．JSON 格式没有换行格式要求，我这样书写是为了清楚地展现插件功能之间的联系． 推荐插件 在此推荐的插件基本都在本书的 book.json) 中出现，可以前往查看用法． 搜索、分享、高亮：这几种插件的推荐请见上一节． LaTeX 数学公式：KaTeX 或者 MathJax，前者更快，后者对命令支持更全． 展开与隐藏： 隐藏左边栏：splitter 隐藏多级目录：collapsible-menu 页脚版权与日期：tbfed-pagefooter Github 图标与链接：github, github-buttons 最后，说一句关于左侧目录如何显示数字编号： { \"pluginsConfig\": { \"theme-default\": { \"showLevel\": true } } } 本章附注 关于主题插件，可以自行查阅．我在此不作推荐． © wklchris all right reserved，powered by Gitbook最后修改于： 2018-10-12 "},"Ch-03.html":{"url":"Ch-03.html","title":"其他使用","keywords":"","body":"其他使用 本章介绍一些其他的 Gitbook 的特性． 数学公式 KaTeX 与 MathJax 都是支持的，但一般而言后者的名气较大，支持的 LaTeX 命令也比较全面．不过在一些情况下的确感觉加载速度不够快．本手册使用了 KaTeX 进行数学公式支持，下面是测试样例： 三角不等式：∣x∣+∣y∣≥∣x+y∣ |x|+|y| \\geq |x+y| ∣x∣+∣y∣≥∣x+y∣. 行间公式无法自动居中显示，我使用了： ... 作为辅助1．显示结果： a2+b2=∫01x\\displaystyle a^2+b^2=\\int_0^1 xa​2​​+b​2​​=∫​0​1​​x 术语 本文没有特别的术语需要阐述；但作为测试，选择“勾股定理”该词作为术语，并加入到 GLOSSARY.md 文件中： ## 勾股定理 直角三角形两直角边的平方和等于斜边的平方． 为了检测英文与中文的支持性差别，这里也加入了\"Hello\"作为术语．下文再提及 Hello 或者勾股定理时，应当能够观察到变化．就目前而言，其对非 ACSII（当然包括中文）都尚无支持． 本章附注 1. 依照 KaTeX 与 MathJax 在 gitbook 上的文档，使用双美元符在行内就是行内公式、在行间使用就是行间公式，但在笔者的设备上未测试通过；具体表现为两种情形都识别为行内公式，且其 span 元素的类也均为行内的类型． ↩ © wklchris all right reserved，powered by Gitbook最后修改于： 2018-10-12 "},"Ch-04.html":{"url":"Ch-04.html","title":"发布到网站","keywords":"","body":"发布到网站 在完成你的 Gitbook 撰写后，你可以将其发布到网站上．通常有在 Gitbook 官网 和通过 Github Pages 服务进行发布两种途径．前者适用于不会操作 git 的用户，后者适用于能够使用 git 的书籍撰写者． 以上两种途径都是免费的，并且都可以说基于 Github 仓库的常规操作．笔者目前使用的第二种方式． 在 Gitbook 官网发布 这部分的操作非常简单，可以通过在 Gitbook 官网免费注册账号（或使用 Github 账号登陆）来完成初始设定．根据你的用户名 ID，你会自动分配一个个人的网址．比如用户名是 xxxx，那么我的 Gitbook 网址就是： xxxx.gitbook.io 这也是用户默认拥有的组织（organizaion）；你可以在用户界面使用 Create an organization 按钮来新建其他的组织． 要上传你的 Gitbook 书籍，可以在组织下新建一个空间（space），然后点击 Edit 命令进行在线编辑——这甚至不需要懂得 git．当然，对于 Github 的用户来说，你可以将 Github 的仓库与 Gitbook 个人账户的某空间作整合（integration），这样你推送到仓库后在 Gitbook 个人空间这边也会自动更新．具体操作是： 进入你的空间，通常为每本书设定一个空间； 点击左下角的设置图标，展开左侧设置栏； 选择“Integrations”，然后选中“Github”，填入你的账号、仓库以进行设置； 等待 webhook 自动设置完成后，即可实现 push 自动更新的效果． 这种方式容易操作，但也有弊端： 每个 Github 仓库最好只储存一本书籍．理论上，Gitbook 网站会识别你仓库内的 book.json 文件，以此完成书籍的生成．但是实测多书的体验并不好． Markdown 书籍显示效果不理想．我没有测试利用构建命令（gitbook build）直接生成静态网页的情形，但是直接使用 Markdown 文件，会发现书籍的章节顺序、排版细节都与本地 gitbook serve 时有出入． 因此，我建议能操作 git 的读者，使用构建命令构建 HTML 文件，然后用下面介绍的 Github Pages 方式实现． 利用 Github Pages 项目网页 Github Pages 的基础使用就不再多说了，一言以蔽之就是 {username}.github.io/{repo-name} 这种项目网址．要为你的 Github 某个仓库设置项目网页，请： 前往项目页面，点击“Settings”； 下拉找到“Github Pages”设置块（参考下图），可以选中 master 分支、docs 文件夹或者特殊的 gh-pages 分支作为源． 保证源的根目录内有 index.html 文件（或者 README.md 文件），这使得你的项目网址主页能够被访问． 使用链接链接到你的书籍 HTML 主文件．比如本书，我设置了主分支作为源，本书在主分支的 CS/Gitbook/publish/ 路径下，主文件是前言文件（由书籍的 README.md 通过 gitbook build 构建1，默认生成名为 index.html 的网页），因此本书的前言网址：wklchris.github.io/{repo-name}/CS/Gitbook/publish/index.html 稍了解 HTML 的朋友都知道，其中尾部的 index.html 通常省略． 然后，你要做的就是将书籍构建好，推送到你的在线仓库，再前往相应的页面访问来查看效果． 相比于前一种 Gitbook 官网发布的方式，本方法： 更加稳定可靠，但首次使用需要配置． 可能需要分支管理．如果你选择了 gh-pages 分支作为源，那么你至少需要懂得如何使用 git 进行分支管理．就算是是使用 master 分支的用户，分支管理也能让你更好地更新书籍（而不是用一堆 master 分支的 commit 来污染仓库的提交历史和那些关注你的用户）． 本章附注 1. 由于 Github Pages 似乎有下划线网址的支持问题（而 gitbook 又会默认将构建结果放在一个名为 _book 的文件夹中），我建议使用 gitbook build {BookFolderName} {OutputFolderLocation} 命令代替简单的 gitbook build． ↩ 举例来说，假如书籍文件夹名为 Book-one，普通构建命令是在其内部运行命令行（或 Bash）gitbook build；而笔者建议的命令需要在其上一级目录，输入形如：gitbook build Book-one Book-one/publish，就能将静态 HTML 书籍构建在 publish 文件夹中．读者可以通过 CMD 脚本完成这一工作，可以参考本书的做法：抛砖引玉． © wklchris all right reserved，powered by Gitbook最后修改于： 2018-10-13 "},"Afterword.html":{"url":"Afterword.html","title":"后记","keywords":"","body":"后记 我之前使用 Github Pages 配合 Jekyll 进行博客的编写，但后来偶然之下发现了“在线书”这样专注于类似书籍展示的服务，便立刻“叛变”了．相比于博客，Gitbook 这种方式能够更快捷、用更少的参数设置来达到更好的笔记效果（主要是结构清晰与方便后期查阅），实在令我相见恨晚． 类似的文档生成方式，比如 Python 官方文档使用的 Sphinx，也是可以考虑的．但是 Gitbook 的优越之处在于是基于 Markdown 的——相比于 rst 文件，我还是觉得 Markdown 更符合人类习惯（笑）． 我使用 Gitbook 的考量总结如下，希望给众读者以启发： 用途：笔记、技术文档、需结构化的稿件 个人考虑的特性： 简洁 Markdown 语法（但尚不支持扩展语法，比如 checkbox）； 较好 LaTeX 数学公式支持； 静态网页即满足个人需要． 全手册完． © wklchris all right reserved，powered by Gitbook最后修改于： 2018-10-13 "},"GLOSSARY.html":{"url":"GLOSSARY.html","keywords":"","body":"Hello This is a test. See what glossary shows you！We can't use math symbols here. 勾股定理 直角三角形两直角边的平方和等于斜边的平方． © wklchris all right reserved，powered by Gitbook最后修改于： 2018-10-12 "}}